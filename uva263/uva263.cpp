/*
uva263

    Given a number, we can form a number chain by
    1. arranging its digits in descending order
    2. arranging its digits in ascending order
    3. subtracting the number obtained in (2) from the number obtained (1) to form a new number
    4. and repeat these steps unless the new number has already appeared in the chain
    Note that 0 is a permitted digit. The number of distinct numbers in the chain is the length of the
    chain. You are to write a program that reads numbers and outputs the number chain and the length
    of that chain for each number read.

    Input
    The input consists of a sequence of positive numbers, all less than 109, each on its own line, terminated
    by ‘0’. The input file contains at most 5000 numbers.

    Output
    The output consists of the number chains generated by the input numbers, followed by their lengths
    exactly in the format indicated below. After each number chain and chain length, including the last
    one, there should be a blank line. No chain will contain more than 1000 distinct numbers.

*/

#include <algorithm>
#include <iostream>
#include <memory>
#include <string>
#include <vector>

#define ONLINE_JUDGE

#ifndef ONLINE_JUDGE
#include <gmock/gmock.h>
#endif

using namespace std;
enum { ASCENDING, DESCENDING };

unsigned int mapping_str_order_to_int(string &input_str, int order_type) {
  if (order_type == ASCENDING)
    sort(input_str.begin(), input_str.end(), less<int>());
  if (order_type == DESCENDING)
    sort(input_str.begin(), input_str.end(), greater<int>());

  return stoi(input_str);
}

void resolve_uva263(string &input_str) {
  unsigned int descending_number = 0;
  unsigned int ascending_number = 0;
  unsigned int difference = 0;
  unsigned int input_integer = stoi(input_str);
  int chain_len = 0;
  vector<int> v;

  cout << "Original number was " << input_integer << endl;
  while (1) {
    input_str = to_string(input_integer);
    descending_number = mapping_str_order_to_int(input_str, DESCENDING);
    ascending_number = mapping_str_order_to_int(input_str, ASCENDING);
    difference = descending_number - ascending_number;
    cout << descending_number << " - " << ascending_number << " = "
         << difference << endl;

    chain_len++;

    vector<int>::iterator it = std::find(v.begin(), v.end(), difference);
    if (it != v.end()) 
      break;
    
    v.push_back(difference);
    input_integer = difference;
  }
  cout << "Chain length " << chain_len << endl;
  return;
}

int main(int argc, char **argv) {
#ifdef ONLINE_JUDGE
    string input;
    while(cin>>input && input[0]!='0') {
        resolve_uva263(input);
        cout << endl;
    }
    return 0;
#else
  testing::InitGoogleMock(&argc, argv);
  return RUN_ALL_TESTS();
#endif
}

#ifndef ONLINE_JUDGE
TEST(mapping_str_order_to_int, acending_125634) {
    std::string input_str = std::to_string(125634);
    EXPECT_EQ (mapping_str_order_to_int(input_str, ASCENDING), 123456);
}

TEST(mapping_str_order_to_int, descending_125634) {
    std::string input_str = std::to_string(125634);
    EXPECT_EQ (mapping_str_order_to_int(input_str, DESCENDING), 654321);
}
#endif
